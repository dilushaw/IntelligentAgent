/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Neural_GUI.java
 *
 * Created on Jul 19, 2011, 9:16:46 PM
 */

package neuralnetwork3;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.util.Arrays;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Dilusha
 */
public class Neural_GUI extends javax.swing.JFrame {
private String age,nationality,gender,profession;
      InterestBank ib;
      private String[] profs = {"Not Working", "Student", "Under Graduate Student", "Doctor", "Lecturer", "Engineer", "Business Person", "Accountant", "Lawyer", "Politician", "Artist"};
      private Passenger pas;
            static final String[] browsers = { "google-chrome", "firefox", "opera",
      "epiphany", "konqueror", "conkeror", "midori", "kazehakase", "mozilla" };
   static final String errMsg = "Error attempting to launch web browser";
   private Vector<String> links;
   private int natIndex;
      /** Creates new form Neural_GUI */
    public Neural_GUI() {
        initComponents();
        
  ib=new InterestBank();
  this.setTitle("Common Interests and Links");
 // this.saveNet();
    }
    public void saveNet(){
        InterestNetwork net = ib.retrieveNetwork("foods");
ib.printOutputValues(net);
//
net.getOutputLayer().get(0).name = "sweets and desserts";
//net.getOutputLayer().get(1).name = "News";
////net.getOutputLayer().get(2).name = "Sports";
////net.getOutputLayer().get(3).name = "Sports";
////net.getOutputLayer().get(4).name = "Sports";
//ib.printOutputValues(net);
//ib.saveNetwork(net);
//    String[] science = {"Simple Science", "Advanced Science","no science"};
//    InterestNetwork net = new InterestNetwork("science", science,3);

//ib.trainScienceNetwork(net);
//ib.saveNetwork(net);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jComboBox2 = new javax.swing.JComboBox();
        jComboBox3 = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Age");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Country");

        jLabel3.setText("Gender");

        jLabel4.setText("Profession");

        jButton1.setText("ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("exit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        CountryNationalityHandler c = new CountryNationalityHandler();
        Vector<String> natList = c.getNationality();

        for(int i=0; i<natList.size(); i++){
            this.jComboBox1.addItem(natList.get(i));
        }

        for(int i=0; i<this.profs.length; i++){
            this.jComboBox2.addItem(this.profs[i]);
        }

        jComboBox3.addItem("Female");
        jComboBox3.addItem("Male");

        jTextArea2.setColumns(20);
        jTextArea2.setEditable(false);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jButton4.setText(">>");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jList1);

        jLabel5.setText("Interest Titles:");

        jLabel6.setText("Sub Categrories and Links:");

        jButton5.setText("Open URLs");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
                    .addComponent(jComboBox1, 0, 561, Short.MAX_VALUE)
                    .addComponent(jComboBox2, 0, 561, Short.MAX_VALUE)
                    .addComponent(jComboBox3, 0, 561, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(jButton2)
                        .addGap(41, 41, 41)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(58, 58, 58))
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addComponent(jButton4)
                        .addGap(26, 26, 26))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(250, 250, 250)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(662, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addGap(138, 138, 138))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton2)
                            .addComponent(jButton1))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5)
                        .addGap(6, 6, 6))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentShown

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
      
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     PointHandler point=new PointHandler();
Vector<Vector<Object>> allSportName_url=null;
if(this.isValidAge(jTextField1.getText())){
    if(this.isValidProfession(jTextField1.getText(), jComboBox2.getSelectedItem().toString())){
        this.age=jTextField1.getText();
      this.nationality=jComboBox1.getSelectedItem().toString();
      this.natIndex = this.jComboBox1.getSelectedIndex();
       this.gender=this.getGenderLetter();
       this.profession=this.jComboBox2.getSelectedItem().toString();
       point.setAge_Str(this.getAge());
    point.setNationality_Str(this.getNationality());
    point.setGender_Str(this.getGender());
    point.setProfession_Str(this.getProfession());

    
pas=new Passenger(point.get_DoubleNationality(),point.get_DoubleAge(),point.get_DoubleGender(),point.get_DoubleProfession());
   System.out.println(point.getAge_Doub()+"    "+point.getNationality_Doub()+"    "+point.getGender_Doub()+"    "+point.getProfession_Doub());
pas.setNationalityString(this.nationality);

   InterestHandler ihandler=new InterestHandler(pas);
Vector<Vector<String>> inter=ib.showInterest(pas);
 String allinterests ="";
 this.jList1.removeAll();
 Vector<String> temp = new Vector<String>();
    for(int i=0; i<inter.size(); i++){
    Vector<String> interest = inter.get(i);
    if(interest.size() >=2){
        temp.add(interest.firstElement());
    }
        }
  this.jList1.setListData(temp);
//// JOptionPane.showMessageDialog(this,"Interests have been extracted!\nInterests of the passenger:\n"+allinterests);
// // this.showInterest(interest);
//
// // Vector<InterestHandler> interHandlerBank=  new  Vector<InterestHandler>();
//  Vector<Vector<String>> allurl=new Vector<Vector<String>>();
//  for(int i=0; i<inter.size(); i++){
//     Vector<String> url=new Vector<String>();
//            try {
//                InterestHandler interHandler = new InterestHandler(pas);
//                Vector<String> interest = inter.get(i);
//                interHandler.setInterest_name(interest.get(0));
//                System.out.println(interest.get(0));
//                url.add(interest.get(0));
//                Vector<String> allinterests2 = new Vector<String>(); //allinterests2 is only for output values
//                for (int j = 1; j < interest.size(); j++) {
//                    allinterests2.add(interest.get(j));
//                    System.out.println(interest.get(j));
//                }
//                interHandler.setInterest_output(allinterests2);
//                //  interHandlerBank.add(interHandler);
//              if(!  interHandler.checkInterest()){
//     WebSearch web=new WebSearch(pas.getNationalityString(),interHandler.getInterestName(),interHandler.getOutput()) ;
// Vector<String> webInterest=web.handleEachInterest();
// for(int j=0;j<webInterest.size();j++){
//                try {
//                  GoogleResults gr=( web.getURL(webInterest.get(j))) ;
//                  for(int k=0;k<gr.getResponseData().getResults().size();k++){
//               url.add(  gr.getResponseData().getResults().get(k).getUrl()) ;
//                    }
//                } catch (IOException ex) {
//                    Logger.getLogger(InterestHandler.class.getName()).log(Level.SEVERE, null, ex);
//                }
//          }
//              }
//
// else{
//                    SportHandler sport=new SportHandler(pas.getNationalityString()) ;
//                    allSportName_url= sport.handleURL();
//
//
// }
//
//
//
//            } catch (UnsupportedEncodingException ex) {
//                Logger.getLogger(Neural_GUI.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (MalformedURLException ex) {
//                Logger.getLogger(Neural_GUI.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//
//allurl.add(url);
// }
//  JOptionPane.showMessageDialog(this,"URLs have been found!\nURLs of the passenger interets:\n"+allurl);
//  String q="";
// //JOptionPane.showMessageDialog(this,"URLs have been found!\nURLs of the SPORTS:\n"+allSportName_url);
// for(int k=0;k<allSportName_url.size();k++){
//     Vector<Object> sports_url;
//     sports_url=allSportName_url.get(k);
//      for(int a=0;a<sports_url.size();a++){
//Object x=sports_url.get(a);
//q=x.toString();
//System.out.println(q);
//        }
//        }
    }
    else{
        JOptionPane.showMessageDialog(this, "The profession and age mismatch! The people who are less than 15 yrs should be students!");
    }
}
else{
    JOptionPane.showMessageDialog(this, "The age entered is invalid!! Please check it");
}
//JOptionPane.showMessageDialog(this,"URLs have been found!\nURLs of the SPORTS:\n"+q);


    }//GEN-LAST:event_jButton1ActionPerformed

    
    private void process(){
     PointHandler point=new PointHandler();
Vector<Vector<Object>> allSportName_url=null;
if(this.isValidAge(jTextField1.getText())){
    if(this.isValidProfession(jTextField1.getText(), jComboBox2.getSelectedItem().toString())){
        this.age=jTextField1.getText();
      this.nationality=jComboBox1.getSelectedItem().toString();
       this.gender=this.getGenderLetter();
       this.profession=this.jComboBox2.getSelectedItem().toString();
       point.setAge_Str(this.getAge());
    point.setNationality_Str(this.getNationality());
    point.setGender_Str(this.getGender());
    point.setProfession_Str(this.getProfession());


Passenger pas=new Passenger(point.get_DoubleNationality(),point.get_DoubleAge(),point.get_DoubleGender(),point.get_DoubleProfession());
   System.out.println(point.getAge_Doub()+"    "+point.getNationality_Doub()+"    "+point.getGender_Doub()+"    "+point.getProfession_Doub());
pas.setNationalityString(this.nationality);

   InterestHandler ihandler=new InterestHandler(pas);
Vector<Vector<String>> inter=ib.showInterest(pas);
 String allinterests ="";
 this.jList1.removeAll();
 Vector<String> temp = new Vector<String>();
    for(int i=0; i<inter.size(); i++){
    Vector<String> interest = inter.get(i);
   for (int j = 1; j < interest.size(); j++) {
                     temp.add(interest.get(j));
                    allinterests=allinterests+interest.get(j)+"\n";

                }

        }
  this.jList1.setListData(temp);
 //JOptionPane.showMessageDialog(this,"Interests have been extracted!\nInterests of the passenger:\n"+allinterests);
 // this.showInterest(interest);

 // Vector<InterestHandler> interHandlerBank=  new  Vector<InterestHandler>();
  Vector<Vector<String>> allurl=new Vector<Vector<String>>();
  for(int i=0; i<inter.size(); i++){
     Vector<String> url=new Vector<String>();
            try {
                InterestHandler interHandler = new InterestHandler(pas);
                Vector<String> interest = inter.get(i);
                interHandler.setInterest_name(interest.get(0));
                System.out.println(interest.get(0));
                url.add(interest.get(0));
                Vector<String> allinterests2 = new Vector<String>(); //allinterests2 is only for output values
                for (int j = 1; j < interest.size(); j++) {
                    allinterests2.add(interest.get(j));
                    System.out.println(interest.get(j));
                }
                interHandler.setInterest_output(allinterests2);
                //  interHandlerBank.add(interHandler);
              if(!  interHandler.checkInterest()){
     WebSearch web=new WebSearch(pas.getNationalityString(),interHandler.getInterestName(),interHandler.getOutput()) ;
 Vector<String> webInterest=web.handleEachInterest();
 for(int j=0;j<webInterest.size();j++){
                try {
                  GoogleResults gr=( web.getURL(webInterest.get(j))) ;
                  for(int k=0;k<gr.getResponseData().getResults().size();k++){
                      if(gr.getResponseData().getResults().get(k).getUrl().contains("wikipedia")){
               url.add(  gr.getResponseData().getResults().get(k).getUrl()) ;
                    }}
                } catch (IOException ex) {
                    Logger.getLogger(InterestHandler.class.getName()).log(Level.SEVERE, null, ex);
                }
          }
              }

 else{
                    SportHandler sport=new SportHandler(pas.getNationalityString()) ;
                    allSportName_url= sport.handleURL();


 }



            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(Neural_GUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(Neural_GUI.class.getName()).log(Level.SEVERE, null, ex);
            }


allurl.add(url);
 }
  JOptionPane.showMessageDialog(this,"URLs have been found!\nURLs of the passenger interets:\n"+allurl);
  String q="";
 //JOptionPane.showMessageDialog(this,"URLs have been found!\nURLs of the SPORTS:\n"+allSportName_url);
 for(int k=0;k<allSportName_url.size();k++){
     Vector<Object> sports_url;
     sports_url=allSportName_url.get(k);
      for(int a=0;a<sports_url.size();a++){
Object x=sports_url.get(a);
q=x.toString();
System.out.println(q);
        }
        }
    }
    else{
        JOptionPane.showMessageDialog(this, "The profession and age mismatch! The people who are less than 15 yrs should be students!");
    }
}
else{
    JOptionPane.showMessageDialog(this, "The age entered is invalid!! Please check it");
}
//JOptionPane.showMessageDialog(this,"URLs have been found!\nURLs of the SPORTS:\n"+q);

    }
    private void showInterest(Vector<String> ints){
        String text = "";
        for(int i=0; i<ints.size(); i++){
            text = text+ints.get(i)+"\n";
        }
//        this.jTextArea1.setText(text);
    }
private String getGenderLetter(){
    String gen =this.jComboBox3.getSelectedItem().toString();
    if(gen.equals("Female")){
        return "f";
    }else{
        return "m";
    }
}
    private boolean isValidAge(String val){
        boolean valid = true;
        int intVal = -1;
        try{
        intVal = Integer.parseInt(val);
        }
        catch(NumberFormatException ex){
           return false;
        }
        if(intVal> 0 & intVal<100){
            valid = true;
        }else{
            valid = false;
        }
        return valid;
    }
  /*  private void getURLInterest(Passenger pas){
            WebSearch web=new WebSearch(pas.getNationalityString(),this.interestName,this.output) ;
 Vector<String> webInterest=web.handleEachInterest();
 for(int i=0;i<webInterest.size();i++){
                try {
                  GoogleResults gr=( web.getURL(webInterest.get(i))) ;
                  web.searchResults(gr);
                } catch (IOException ex) {
                    Logger.getLogger(InterestHandler.class.getName()).log(Level.SEVERE, null, ex);
                }
          }
    }*/





    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        this.jTextField1.setText("");
        this.jComboBox1.setSelectedIndex(0);
        this.jComboBox2.setSelectedIndex(0);
        this.jComboBox3.setSelectedIndex(0);
        this.jList1.setListData(new Vector<String>());
        this.jTextArea2.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
//    if(!this.jList1.isSelectionEmpty()){
//        String intName = this.jList1.getSelectedValue().toString();
//        Vector<String> subInts = ib.getSubInterests(pas, intName);
//        Vector<Vector<Object>> allSportName_url = new Vector<Vector<Object>>();
//         Vector<Vector<String>> allurl=new Vector<Vector<String>>();
// // for(int i=0; i<sub.size(); i++){
//     Vector<String> url=new Vector<String>();
//            try {
//                InterestHandler interHandler = new InterestHandler(pas);
//                //Vector<String> interest = inter.get(i);
//                interHandler.setInterest_name(intName);
//               // System.out.println(interest.get(0));
//                //url.add(intName);
//             //   Vector<String> allinterests2 =
//                interHandler.setInterest_output(subInts);
//                //  interHandlerBank.add(interHandler);
//              if(!  interHandler.checkInterest()){
//     WebSearch web=new WebSearch(pas.getNationalityString(),interHandler.getInterestName(),interHandler.getOutput()) ;
// Vector<String> webInterest=web.handleEachInterest();
// for(int j=0;j<webInterest.size();j++){
//                try {
//                  //allurl.add(subInts.get(j));
//                  url.add(subInts.get(j));
//                  GoogleResults gr=( web.getURL(webInterest.get(j))) ;
//                  if(!(gr==null)){
//                  if(!(gr.getResponseData()==null)){
//                  for(int k=0;k<gr.getResponseData().getResults().size();k++){
//               url.add(  gr.getResponseData().getResults().get(k).getUrl()) ;
//                    }
//     }}
//                } catch (IOException ex) {
//                    Logger.getLogger(InterestHandler.class.getName()).log(Level.SEVERE, null, ex);
//                }
//          }
// allurl.add(url);
// this.links = url;
// String temp = "";
// for(int i=0; i<url.size(); i++){
//     if(i+1<url.size()){
//        if(url.get(i+1).indexOf("http") == -1)temp = temp + url.get(i) + "\n" + "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"+ "\n" + "\n";
//        else temp = temp + url.get(i) + "\n";
//    }
//
//     else temp = temp + url.get(i) + "\n";
//    //  temp = temp + url.get(i) + "\n";
// }
// this.jTextArea2.setText(temp);
//              }
//
// else{              CountryNationalityHandler c = new CountryNationalityHandler();
//                    String contry = c.getCountry(this.natIndex);
//                    this.links = new Vector<String>();
//                    SportHandler sport=new SportHandler(contry) ;
//                    allSportName_url= sport.handleURL();
//                    String text = "";
//                    for(int k=0;k<allSportName_url.size();k++){
//     Vector<Object> sports_url;
//     sports_url=allSportName_url.get(k);
//
//     text = text+ "\n" + "+++++++++++++++++++++++++++++++++++++++++++"+ "\n";
//      for(int a=0;a<sports_url.size();a++){
//          this.links.add(sports_url.get(a).toString());
//Object x=sports_url.get(a);
//    text = text + x.toString() + "\n";
//        }
//        }
//
//                    this.jTextArea2.setText(text);
//
// }
//            } catch (UnsupportedEncodingException ex) {
//                Logger.getLogger(Neural_GUI.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (MalformedURLException ex) {
//                Logger.getLogger(Neural_GUI.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//
//
//// }
// // JOptionPane.showMessageDialog(this,"URLs have been found!\nURLs of the passenger interets:\n"+allurl);
// // String q="";
// //JOptionPane.showMessageDialog(this,"URLs have been found!\nURLs of the SPORTS:\n"+allSportName_url);
//
//
//    }else{
//        JOptionPane.showMessageDialog(this, "Please select a interest to show the search results");
//    }

           if(!this.jList1.isSelectionEmpty()){
        String intName = this.jList1.getSelectedValue().toString();
        Vector<String> subInts = ib.getSubInterests(pas, intName);
        Vector<Vector<Object>> allSportName_url = new Vector<Vector<Object>>();
         Vector<Vector<String>> allurl=new Vector<Vector<String>>();
 // for(int i=0; i<sub.size(); i++){
     Vector<String> url=new Vector<String>();
            try {
                InterestHandler interHandler = new InterestHandler(pas);
                //Vector<String> interest = inter.get(i);
                interHandler.setInterest_name(intName);
               // System.out.println(interest.get(0));
                //url.add(intName);
             //   Vector<String> allinterests2 =
                interHandler.setInterest_output(subInts);
                //  interHandlerBank.add(interHandler);
              if(!  interHandler.checkInterest()){
     WebSearch web=new WebSearch(pas.getNationalityString(),interHandler.getInterestName(),interHandler.getOutput()) ;
 Vector<String> webInterest=web.handleEachInterest();
 for(int j=0;j<webInterest.size();j++){
                try {
                  //allurl.add(subInts.get(j));
                  url.add(subInts.get(j));
                  GoogleResults gr=( web.getURL(webInterest.get(j))) ;
                  for(int k=0;k<gr.getResponseData().getResults().size();k++){
               url.add(  gr.getResponseData().getResults().get(k).getUrl()) ;
                    }

                } catch (IOException ex) {
                   j = webInterest.size();
                   url.removeAllElements();
                   JOptionPane.showMessageDialog(this, "No Internet Connection.\nPlease connect to internet and try again");
                }
                catch(Exception ex){
                    j = webInterest.size();
                   url.removeAllElements();
                   JOptionPane.showMessageDialog(this, "No Internet Connection.\nPlease connect to internet and try again");
                }
          }
 allurl.add(url);
 this.links = url;
 String temp = "";
 for(int i=0; i<url.size(); i++){
     if(i+1<url.size()){
        if(url.get(i+1).indexOf("http") == -1)temp = temp + url.get(i) + "\n" + "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"+ "\n" + "\n";
        else temp = temp + url.get(i) + "\n";
    }

     else temp = temp + url.get(i) + "\n";
    //  temp = temp + url.get(i) + "\n";
 }
 this.jTextArea2.setText(temp);
              }

 else{              CountryNationalityHandler c = new CountryNationalityHandler();
                    String contry = c.getCountry(this.natIndex);
                    this.links = new Vector<String>();
                    SportHandler sport=new SportHandler(contry) ;
                    allSportName_url= sport.handleURL();
                    if(allSportName_url !=null){
                    String text = "";
                    for(int k=0;k<allSportName_url.size();k++){
     Vector<Object> sports_url;
     sports_url=allSportName_url.get(k);

     text = text+ "\n" + "+++++++++++++++++++++++++++++++++++++++++++"+ "\n";
      for(int a=0;a<sports_url.size();a++){
          this.links.add(sports_url.get(a).toString());
Object x=sports_url.get(a);
    text = text + x.toString() + "\n";
        }
        }

                    this.jTextArea2.setText(text);

 }
                    else{
                        this.jTextArea2.setText("");
                        JOptionPane.showMessageDialog(this, "No Internet Connection.\nPlease connect to internet and try again");
                    }
 }
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(Neural_GUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(Neural_GUI.class.getName()).log(Level.SEVERE, null, ex);
            }



// }
 // JOptionPane.showMessageDialog(this,"URLs have been found!\nURLs of the passenger interets:\n"+allurl);
 // String q="";
 //JOptionPane.showMessageDialog(this,"URLs have been found!\nURLs of the SPORTS:\n"+allSportName_url);


    }else{
        JOptionPane.showMessageDialog(this, "Please select a interest to show the search results");
    }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        for(int i=0; i<this.links.size(); i++){
           if(links.get(i).indexOf("http") != -1) openURL(links.get(i));
    }
    }//GEN-LAST:event_jButton5ActionPerformed

    public String getAge() {
        return age;
    }

    public void setAge(String age) {
        this.age = age;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public String getNationality() {
        return nationality;
    }

    public void setNationality(String nationality) {
        this.nationality = nationality;
    }

    public String getProfession() {
        return profession;
    }

    public void setProfession(String profession) {
        this.profession = profession;
    }



   /**
    * Opens the specified web page in the user's default browser
    * @param url A web address (URL) of a web page (ex: "http://www.google.com/")
    */
   public static void openURL(String url) {
      try {  //attempt to use Desktop library from JDK 1.6+
         Class<?> d = Class.forName("java.awt.Desktop");
         d.getDeclaredMethod("browse", new Class[] {java.net.URI.class}).invoke(
            d.getDeclaredMethod("getDesktop").invoke(null),
            new Object[] {java.net.URI.create(url)});
         //above code mimicks:  java.awt.Desktop.getDesktop().browse()
         }
      catch (Exception ignore) {  //library not available or failed
         String osName = System.getProperty("os.name");
         try {
            if (osName.startsWith("Mac OS")) {
               Class.forName("com.apple.eio.FileManager").getDeclaredMethod(
                  "openURL", new Class[] {String.class}).invoke(null,
                  new Object[] {url});
               }
            else if (osName.startsWith("Windows"))
               Runtime.getRuntime().exec(
                  "rundll32 url.dll,FileProtocolHandler " + url);
            else { //assume Unix or Linux
               String browser = null;
               for (String b : browsers)
                  if (browser == null && Runtime.getRuntime().exec(new String[]
                        {"which", b}).getInputStream().read() != -1)
                     Runtime.getRuntime().exec(new String[] {browser = b, url});
               if (browser == null)
                  throw new Exception(Arrays.toString(browsers));
               }
            }
         catch (Exception e) {
            JOptionPane.showMessageDialog(null, errMsg + "\n" + e.toString());
            }
         }
      }


private boolean isValidProfession(String age, String prof){
    int intAge= Integer.parseInt(age);
    if(intAge<=15){
        return prof.equals(this.profs[1]);
    }
    else return true;
}






    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Neural_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables





}
